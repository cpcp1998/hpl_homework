This run was done on: Sat Jul 22 02:13:47 CST 2017
HPL.dat: 
HPLinpack benchmark input file
Innovative Computing Laboratory, University of Tennessee
HPL.out      output file name (if any)
6            device out (6=stdout,7=stderr,file)
1            # of problems sizes (N)
8000         Ns
1            # of NBs
192          NBs
2            PMAP process mapping (0=Row-,1=Column-major)
1            # of process grids (P x Q)
1 2          Ps
2 1          Qs
16.0         threshold
1            # of panel fact
2 1 0        PFACTs (0=left, 1=Crout, 2=Right)
1            # of recursive stopping criterium
2            NBMINs (>= 1)
1            # of panels in recursion
2            NDIVs
1            # of recursive panel fact.
1 0 2        RFACTs (0=left, 1=Crout, 2=Right)
1            # of broadcast
0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)
1            # of lookahead depth
0            DEPTHs (>=0)
0            SWAP (0=bin-exch,1=long,2=mix)
1            swapping threshold
0            L1 in (0=transposed,1=no-transposed) form
0            U  in (0=transposed,1=no-transposed) form
1            Equilibration (0=no,1=yes)
8            memory alignment in double (> 0)
Binary name: 
-rwxr-xr-x. 1 cp cp 12305648 Jul 22 00:59 xhpl_intel64_dynamic
This script: 
#!/bin/bash
#===============================================================================
# Copyright 2001-2017 Intel Corporation All Rights Reserved.
#
# The source code,  information  and material  ("Material") contained  herein is
# owned by Intel Corporation or its  suppliers or licensors,  and  title to such
# Material remains with Intel  Corporation or its  suppliers or  licensors.  The
# Material  contains  proprietary  information  of  Intel or  its suppliers  and
# licensors.  The Material is protected by  worldwide copyright  laws and treaty
# provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
# modified, published,  uploaded, posted, transmitted,  distributed or disclosed
# in any way without Intel's prior express written permission.  No license under
# any patent,  copyright or other  intellectual property rights  in the Material
# is granted to  or  conferred  upon  you,  either   expressly,  by implication,
# inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
# property rights must be express and approved by Intel in writing.
#
# Unless otherwise agreed by Intel in writing,  you may not remove or alter this
# notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
# suppliers or licensors in any way.
#===============================================================================

#
echo "This is a SAMPLE run script.  Change it to reflect the correct number"
echo "of CPUs/threads, number of nodes, MPI processes per node, etc.."

# Set total number of MPI processes for the HPL (should be equal to PxQ).
export MPI_PROC_NUM=2

# Set the MPI per node and number of MICs attached to each node.
# MPI_PER_NODE should be equal to 1 or number of sockets in the system. Otherwise,
# the HPL performance will be low. 
# MPI_PER_NODE is same as -perhost or -ppn paramaters in mpirun/mpiexec
export MPI_PER_NODE=1

# Set number of MICs that HPL will access per node
export NUMMIC=2

#
# You can find description of all Intel MPI parameters in the
# Intel MPI Reference Manual.
# See <intel mpi installdir>/doc/Reference_manual.pdf
export I_MPI_DAPL_DIRECT_COPY_THRESHOLD=655360

#         "export I_MPI_PIN_CELL=core"
#         You can use this variable (beginning Intel MPI 4.0.1 for cases if HT is enabled. 
#         The variable forces to pin MPI processes and threads to real cores, 
#         so logical processors will not be involved.
#         It can be used together with the variable below, when Hydra Process Manager:
#         "export I_MPI_PIN_DOMAIN=auto" This allows uniform distribution of
#	      the processes and thread domains

# export I_MPI_EAGER_THRESHOLD=128000
#          This setting may give 1-2% of performance increase over the
#          default value of 262000 for large problems and high number of cores

export OUT=xhpl_intel64_dynamic_outputs.txt
export HPL_EXE=xhpl_intel64_dynamic

echo -n "This run was done on: "
date

# Capture some meaningful data for future reference:
echo -n "This run was done on: " >> $OUT
date >> $OUT
echo "HPL.dat: " >> $OUT
cat HPL.dat >> $OUT
echo "Binary name: " >> $OUT
ls -l xhpl_intel64_dynamic >> $OUT
echo "This script: " >> $OUT
cat runme_intel64_dynamic >> $OUT
echo "Environment variables: " >> $OUT
env >> $OUT
echo "Actual run: " >> $OUT

# Environment variables can also be also be set on the Intel MPI command line
# using the -genv option (to appear before the -np 1):

# mpirun -np ${MPI_PROC_NUM} ./runme_intel64_prv "$@" | tee -a $OUT

# In case of multiple nodes involved, please set the number of MPI processes
# per node (ppn=1,2 typically) through the -perhost option (because the
# default is all cores):

mpirun -perhost ${MPI_PER_NODE} -np ${MPI_PROC_NUM} ./runme_intel64_prv "$@" | tee -a $OUT

echo -n "Done: " >> $OUT
date >> $OUT

echo -n "Done: "
date
Environment variables: 
MPI_PROC_NUM=2
XDG_SESSION_ID=3
HOSTNAME=cpcentos
SELINUX_ROLE_REQUESTED=
SHELL=/bin/bash
TERM=xterm
HISTSIZE=1000
SSH_CLIENT=192.168.183.1 57142 22
SELINUX_USE_CURRENT_RANGE=
OUT=xhpl_intel64_dynamic_outputs.txt
SSH_TTY=/dev/pts/0
USER=cp
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:
LD_LIBRARY_PATH=/opt/mpi/lib:/opt/blas/lib:/opt/intel/compilers_and_libraries/linux/lib/intel64_lin
MPI_PER_NODE=1
NUMMIC=2
PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mpi/bin:/opt/blas/bin:/home/cp/.local/bin:/home/cp/bin
MAIL=/var/spool/mail/cp
I_MPI_DAPL_DIRECT_COPY_THRESHOLD=655360
C_INCLUDE_PATH=/opt/mpi/include:/opt/blas/include
HPL_EXE=xhpl_intel64_dynamic
PWD=/home/cp/intel-benchmarks/mp_linpack
LANG=en_US.UTF-8
SELINUX_LEVEL_REQUESTED=
HISTCONTROL=ignoredups
HOME=/home/cp
SHLVL=2
LOGNAME=cp
SSH_CONNECTION=192.168.183.1 57142 192.168.183.154 22
LESSOPEN=||/usr/bin/lesspipe.sh %s
XDG_RUNTIME_DIR=/run/user/1000
_=/usr/bin/env
Actual run: 
MPI_RANK_FOR_NODE=0 NODE=0, CORE=, MIC=, SHARE=
MPI_RANK_FOR_NODE=0 NODE=0, CORE=, MIC=, SHARE=
HPL[] : libscif.so.0 is missing.
HPL[] : libscif.so.0 is missing.
Number of Intel(R) Xeon Phi(TM) coprocessors : 0
================================================================================
HPLinpack 2.1  --  High-Performance Linpack benchmark  --   October 26, 2012
Written by A. Petitet and R. Clint Whaley,  Innovative Computing Laboratory, UTK
Modified by Piotr Luszczek, Innovative Computing Laboratory, UTK
Modified by Julien Langou, University of Colorado Denver
================================================================================

An explanation of the input/output parameters follows:
T/V    : Wall time / encoded variant.
N      : The order of the coefficient matrix A.
NB     : The partitioning blocking factor.
P      : The number of process rows.
Q      : The number of process columns.
Time   : Time in seconds to solve the linear system.
Gflops : Rate of execution for solving the linear system.

The following parameter values will be used:

N        :    8000 
NB       :     192 
PMAP     : Row-major process mapping
P        :       1 
Q        :       2 
PFACT    :   Right 
NBMIN    :       2 
NDIV     :       2 
RFACT    :   Crout 
BCAST    :   1ring 
DEPTH    :       0 
SWAP     : Binary-exchange
L1       : transposed form
U        : transposed form
EQUIL    : yes
ALIGN    :    8 double precision words

--------------------------------------------------------------------------------

- The matrix A is randomly generated for each test.
- The following scaled residual check will be computed:
      ||Ax-b||_oo / ( eps * ( || x ||_oo * || A ||_oo + || b ||_oo ) * N )
- The relative machine precision (eps) is taken to be               1.110223e-16
- Computational tests pass if scaled residuals are less than                16.0

cpcentos        : Column=000192 Fraction=0.005 Kernel=    0.00 Mflops=441107.95
cpcentos        : Column=000384 Fraction=0.025 Kernel=64023.49 Mflops=113908.08
cpcentos        : Column=000576 Fraction=0.050 Kernel=73171.64 Mflops=101586.76
cpcentos        : Column=000768 Fraction=0.075 Kernel=68433.71 Mflops=88264.80
cpcentos        : Column=000960 Fraction=0.100 Kernel=68308.73 Mflops=86630.98
cpcentos        : Column=001152 Fraction=0.120 Kernel=63792.55 Mflops=80424.51
cpcentos        : Column=001344 Fraction=0.145 Kernel=58121.36 Mflops=79235.21
cpcentos        : Column=001536 Fraction=0.170 Kernel=65617.41 Mflops=76399.70
cpcentos        : Column=001728 Fraction=0.195 Kernel=68264.57 Mflops=76390.39
cpcentos        : Column=001920 Fraction=0.220 Kernel=62764.92 Mflops=74500.78
cpcentos        : Column=002112 Fraction=0.240 Kernel=71288.86 Mflops=74913.65
cpcentos        : Column=002304 Fraction=0.265 Kernel=62646.55 Mflops=73071.43
cpcentos        : Column=002496 Fraction=0.290 Kernel=60659.92 Mflops=73580.14
cpcentos        : Column=002688 Fraction=0.315 Kernel=57411.83 Mflops=71973.82
cpcentos        : Column=002880 Fraction=0.340 Kernel=74799.08 Mflops=72584.83
cpcentos        : Column=003072 Fraction=0.360 Kernel=62608.93 Mflops=71458.15
cpcentos        : Column=003264 Fraction=0.385 Kernel=49877.06 Mflops=71174.32
cpcentos        : Column=003456 Fraction=0.410 Kernel=56612.56 Mflops=70341.28
cpcentos        : Column=003648 Fraction=0.435 Kernel=59481.76 Mflops=70376.77
cpcentos        : Column=003840 Fraction=0.460 Kernel=58406.39 Mflops=69813.83
cpcentos        : Column=004032 Fraction=0.480 Kernel=55186.54 Mflops=69734.83
cpcentos        : Column=004224 Fraction=0.515 Kernel=57556.12 Mflops=69356.05
cpcentos        : Column=004416 Fraction=0.535 Kernel=52559.64 Mflops=69207.34
cpcentos        : Column=004608 Fraction=0.555 Kernel=49063.76 Mflops=68784.51
cpcentos        : Column=004800 Fraction=0.595 Kernel=55851.89 Mflops=68881.14
cpcentos        : Column=004992 Fraction=0.615 Kernel=46773.35 Mflops=68253.72
cpcentos        : Column=005184 Fraction=0.635 Kernel=48174.34 Mflops=68312.47
cpcentos        : Column=005376 Fraction=0.655 Kernel=45173.25 Mflops=67758.13
cpcentos        : Column=005568 Fraction=0.675 Kernel=49226.69 Mflops=67896.66
cpcentos        : Column=006528 Fraction=0.795 Kernel=43912.23 Mflops=66821.31
cpcentos        : Column=007296 Fraction=0.895 Kernel=30278.40 Mflops=66376.55
================================================================================
T/V                N    NB     P     Q               Time                 Gflops
--------------------------------------------------------------------------------
WR00C2R2        8000   192     1     2               5.60            6.09161e+01
HPL_pdgesv() start time Sat Jul 22 02:14:12 2017

HPL_pdgesv() end time   Sat Jul 22 02:14:18 2017

--------------------------------------------------------------------------------
||Ax-b||_oo/(eps*(||A||_oo*||x||_oo+||b||_oo)*N)=        0.0059924 ...... PASSED
================================================================================

Finished      1 tests with the following results:
              1 tests completed and passed residual checks,
              0 tests completed and failed residual checks,
              0 tests skipped because of illegal input values.
--------------------------------------------------------------------------------

End of Tests.
================================================================================
Done: Sat Jul 22 02:14:20 CST 2017
